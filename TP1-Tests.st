TestCase subclass: #AlgoChatTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 16:56'!test10ElUsuarioPuedePausarNotificacionesDeCanal	| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'martin'.	algoChat agregarCanalConNombre: 'avisos'.	algoChat agregarCanalConNombre: 'futbol'.	algoChat agregarUsuario: 'martin' alCanal: 'futbol'.	algoChat agregarPalabraClave: 'botines' alUsuario: 'martin'.		algoChat publicarMensaje: 'hoy hay partido' enCanal: 'futbol'.	algoChat publicarMensaje: '@martin va de 10' enCanal: 'futbol'.	algoChat publicarMensaje: '@juan necesita botines talle 42' enCanal: 'futbol'.		algoChat pausarPalabrasDeCanal: 'futbol' paraUsuario: 'martin'.	algoChat publicarMensaje: 'yo tengo unos botines de mas' enCanal: 'futbol'.	algoChat publicarMensaje: 'que venga @martin' enCanal: 'futbol'.		self assert: (algoChat getNotificacionesDeUsuario: 'martin') equals: '@martin va de 10 | @juan necesita botines talle 42 | que venga @martin'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 11:45'!test01ElUsuarioPedidoRecibeMensajes	| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'martin'.	algoChat agregarUsuarioConNombre: 'sebastian'.	algoChat agregarUsuarioConNombre: 'nicolas'.		algoChat enviarMensaje: 'martin viste mi mochila?' aUsuario: 'martin'.	algoChat enviarMensaje: 'la perdi el lunes' aUsuario: 'martin'.	algoChat enviarMensaje: 'como estas?' aUsuario: 'sebastian'.		self assert: (algoChat getNotificacionesDeUsuario: 'sebastian') equals: 'como estas?'.	self assert: (algoChat getNotificacionesDeUsuario: 'martin') equals: 'martin viste mi mochila? | la perdi el lunes'.	self assert: (algoChat getNotificacionesDeUsuario: 'nicolas') equals: ''.		self assert: (algoChat getNotificacionesDeUsuario: 'martin' resumidasALongitud: 3) equals: 'mar... | la ...'.	! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 16:34'!test07UsuarioEnCanalRecibeMensajeAlSerMencionado	| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'martin'.	algoChat agregarUsuarioConNombre: 'florencia'.	algoChat agregarCanalConNombre: 'feriado'.	algoChat agregarUsuario: 'martin' alCanal: 'feriado'.	algoChat agregarUsuario: 'florencia' alCanal: 'feriado'.		algoChat publicarMensaje: 'hoy no hay clases' enCanal: 	'feriado'.	algoChat publicarMensaje: 'avisenle a @juan y a @florencia' enCanal: 'feriado'.	algoChat publicarMensaje: '@juan vino igual' enCanal: 'feriado'.	algoChat publicarMensaje: 'nadie le aviso a florencia' enCanal: 'feriado'.		self assert: (algoChat getNotificacionesDeUsuario: 'martin') equals: ''.	self assert: (algoChat getNotificacionesDeUsuario: 'florencia') equals: 'avisenle a @juan y a @florencia'.		! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 16:48'!test09ElUsuarioRecibeMensajeConPalabraClaveEnSuCanal	| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'nico'.	algoChat agregarUsuarioConNombre: 'franca'.	algoChat agregarPalabraClave: 'libro' alUsuario: 'franca'.	algoChat agregarPalabraClave: 'parcial' alUsuario: 'nico'.		algoChat agregarCanalConNombre: 'fisica'.	algoChat agregarUsuario: 'nico' alCanal: 'fisica'.	algoChat agregarUsuario: 'franca' alCanal: 'fisica'.		algoChat publicarMensaje: 'hoy hay que traer el libro' enCanal: 'fisica'.	algoChat publicarMensaje: '@juan no te olvides de la tarea' enCanal: 'fisica'.	algoChat publicarMensaje: 'avisenle a @martin' enCanal: 'fisica'.	algoChat publicarMensaje: '@franca hoy era el parcial' enCanal: 'fisica'.		self assert: (algoChat getNotificacionesDeUsuario: 'franca') equals: 'hoy hay que traer el libro | @franca hoy era el parcial'.	self assert: (algoChat getNotificacionesDeUsuario: 'nico') equals: '@franca hoy era el parcial'.		! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 12:37'!test04UsuariosAgregadosACanalNoRecibenSusNotificaciones	| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'martin'.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'avisos'.		algoChat agregarUsuario: 'juan' alCanal: 'avisos'.	algoChat agregarUsuario: 'martin' alCanal: 'avisos'.	algoChat publicarMensaje: 'hoy tenemos clases' enCanal: 'avisos'.	algoChat publicarMensaje: 'vino juan o martin?' enCanal: 'avisos'.		algoChat enviarMensaje: 'venis hoy?' aUsuario: 'juan'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'venis hoy?'.	self assert: (algoChat getNotificacionesDeUsuario: 'martin') equals: ''.	! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 12:06'!test03ElCanalPedidoGuardaMensajesYUsuarios	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'avisos'.	algoChat agregarCanalConNombre: 'notas'.	algoChat agregarCanalConNombre: 'partido'.	algoChat agregarUsuario: 'juan' alCanal: 'avisos'.		algoChat publicarMensaje: 'clases suspendidas' enCanal: 'avisos'.	algoChat publicarMensaje: 'alguien vio un libro verde?' enCanal: 'avisos'.	algoChat publicarMensaje: 'el viernes estan las notas' enCanal: 'notas'.		self assert: algoChat getCantidadUsuarios equals: 1.	self assert: algoChat getCantidadCanales equals: 3.	self assert: (algoChat mensajesDelCanal: 'avisos') equals: 'clases suspendidas | alguien vio un libro verde?'.	self assert: (algoChat mensajesDelCanal: 'avisos' resumidosALongitud: 4 ) equals: 'clas... | algu...'.	self assert: (algoChat mensajesDelCanal: 'notas') equals: 'el viernes estan las notas'.	self assert: (algoChat mensajesDelCanal: 'partido') equals: ''.! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 16:42'!test08UsuarioMencionadoYenConversacionRecibeSusMensajes	| algoChat |	algoChat := AlgoChat new.		algoChat agregarCanalConNombre: 'avisos'.	algoChat agregarUsuarioConNombre: 'flor'.	algoChat agregarUsuarioConNombre: 'nico'.	algoChat agregarUsuario: 'flor' alCanal: 'avisos'.	algoChat agregarUsuario: 'nico' alCanal: 'avisos'.	algoChat crearConversacionConUsuarios: 'flor,nico'.		algoChat publicarMensaje: 'alguien vio la cartuchera de @flor'  enCanal: 'avisos'.	algoChat publicarMensaje: 'creo que @nico la tiene,esuchaste @flor ?'  enCanal: 'avisos'.	algoChat publicarMensaje: 'cartuchera verde encontrada' enConversacion: 'flor,nico'.		self assert: (algoChat getMensajesDeConversacion: 'flor,nico') equals: 'cartuchera verde encontrada'.	self assert: (algoChat getNotificacionesDeUsuario: 'flor') equals: 'alguien vio la cartuchera de @flor | creo que @nico la tiene,esuchaste @flor ? | cartuchera verde encontrada'.	self assert: (algoChat getNotificacionesDeUsuario: 'nico') equals: 'creo que @nico la tiene,esuchaste @flor ? | cartuchera verde encontrada'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 17:12'!test11ElUsuarioPuedeRenaudarPalabrasDeCanal	| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'martin'.	algoChat agregarUsuarioConNombre: 'diego'.	algoChat agregarCanalConNombre: 'futbol'.	algoChat agregarPalabraClave: 'ganamos' alUsuario: 'diego'.	algoChat agregarPalabraClave: 'perdimos' alUsuario: 'martin'.		algoChat agregarUsuario: 'martin' alCanal: 'futbol'.	algoChat agregarUsuario: 'diego' alCanal: 'futbol'.		algoChat publicarMensaje: 'ganamos o perdimos ?' enCanal: 'futbol'.	algoChat publicarMensaje: 'perdimos 3 a 1' enCanal: 'futbol'.	algoChat publicarMensaje: '@diego metio 1 gol' enCanal: 'futbol'.	algoChat pausarPalabrasDeCanal: 'futbol' paraUsuario: 'diego'.			algoChat publicarMensaje: 'el proximo lo ganamos' enCanal: 'futbol'.	algoChat publicarMensaje: 'con @diego de 4 se puede' enCanal: 'futbol'.	algoChat publicarMensaje: 'ganamos 5 a 2' enCanal: 'futbol'.	algoChat reanudarPalabrasDeCanal: 'futbol' paraUsuario: 'diego'.			algoChat publicarMensaje: 'ganamos 4 a 2' enCanal: 'futbol'.		self assert: (algoChat getNotificacionesDeUsuario: 'martin') equals: 'ganamos o perdimos ? | perdimos 3 a 1'.	self assert: (algoChat getNotificacionesDeUsuario: 'diego') equals: 'ganamos o perdimos ? | @diego metio 1 gol | con @diego de 4 se puede | ganamos 4 a 2'.		 			! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 12:42'!test05LasConversacionesEnvianMensajesASusUsuarios	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'jhon'.	algoChat agregarUsuarioConNombre: 'roberto'.		algoChat crearConversacionConUsuarios: 'jhon,roberto'.	algoChat publicarMensaje: 'hicieron la tarea?' enConversacion: 'jhon,roberto'.	algoChat publicarMensaje: 'era para hoy' enConversacion: 'jhon,roberto'.		self assert: (algoChat getNotificacionesDeUsuario: 'jhon') equals: 'hicieron la tarea? | era para hoy'.	self assert: (algoChat getNotificacionesDeUsuario: 'roberto') equals: 'hicieron la tarea? | era para hoy'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 11:38'!test00AgregarUsuariosYCanalesModificaElTamanioDelChat	| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'carlos'.	algoChat agregarCanalConNombre: 'avisos'.		self assert: algoChat getCantidadCanales equals: 1.	self assert: algoChat getCantidadUsuarios equals: 2.		! !TestCase subclass: #CanalTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!CanalTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 21:12'!test05ElCanalConNombreDevuelveLosMensajesResumidos	| unCanal |	unCanal := Canal new.		unCanal agregarMensaje: 'me tengo que ir' enCanal: 'anuncios'.	unCanal agregarMensaje: 'hasta luego' enCanal: 'anuncios'.		self assert: unCanal getMensaje equals: 'me tengo que ir | hasta luego'.	self assert: (unCanal getMensajeConLongitud: 4) equals: 'me t... | hast...'.	self assert: (unCanal getMensajeConLongitud: 3) equals: 'me ... | has...'	! !!CanalTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 20:10'!test00CanalConMensajeVacioDevuelveCadenaVacia	| unCanal |	unCanal := Canal new.		self assert: unCanal getMensaje equals: ''.! !!CanalTest methodsFor: 'tests' stamp: 'Andoni 10/18/2019 11:29'!test06AgregarUsuariosAlCanalNoModificaSusMensajes	| unCanal unUsuario otroUsuario |	unCanal := Canal new.	unUsuario := Usuario new.	otroUsuario := Usuario new.		unCanal agregarMensaje: 'recien dejo de llover'.	unCanal agregarUsuarioAlCanal: unUsuario.	unCanal agregarMensaje: 'todavia no sali de casa'.	unCanal agregarUsuarioAlCanal: otroUsuario.		self assert: unCanal getMensaje equals: 'recien dejo de llover | todavia no sali de casa'.! !!CanalTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 20:17'!test01ElCanalGuardaMensajesAlAgregarMensaje	| unCanal otroCanal |	unCanal := Canal new.	otroCanal := Canal new.		unCanal agregarMensaje: 'hola,todo bien'.	unCanal agregarMensaje: 'hoy esta'.	unCanal agregarMensaje: 'lloviendo'.	unCanal agregarMensaje: 'lloviendo mucho'.		otroCanal agregarMensaje: 'el parcial es el sabado 30'.	otroCanal agregarMensaje: 'hay que estudiar!!'.		self assert: unCanal getMensaje equals: 'hola,todo bien | hoy esta | lloviendo | lloviendo mucho'.	self assert: otroCanal getMensaje equals: 'el parcial es el sabado 30 | hay que estudiar!!'.! !!CanalTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 20:51'!test03ElCanalDevuelveLosMensajesRecortadosConLongitudUno	| unCanal |	unCanal := Canal new.		unCanal agregarMensaje: 'hola!!'.	unCanal agregarMensaje: 'que'.	unCanal agregarMensaje: 'tal'.	unCanal agregarMensaje: 'como'.		self assert: (unCanal getMensajeConLongitud: 1) equals: 'h... | q... | t... | c...'	! !!CanalTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 20:41'!test02ElCanalDevuelveLosMensajesRecortados	| unCanal  otroCanal|	otroCanal := Canal new.	unCanal := Canal new.		unCanal agregarMensaje: 'tengo muchos finales para rendir'.	unCanal agregarMensaje: 'y hay muchos trabajos practicos'.	unCanal agregarMensaje: 'hay que estudiar'.		self assert: (unCanal getMensajeConLongitud: 4) equals: 'teng... | y ha... | hay ...'.	self assert: (unCanal getMensajeConLongitud: 2 ) equals: 'te... | y ... | ha...'.	self assert: otroCanal getMensaje equals: ''! !!CanalTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 20:54'!test04AgregarMensajeEnCanalConNombre	| unCanal |	unCanal := Canal new.		unCanal agregarMensaje: 'chau,me voy' enCanal: 'anuncios'.		self assert: unCanal getMensaje equals: 'chau,me voy'.! !TestCase subclass: #ConversacionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!ConversacionTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 21:28'!test02ConversacionDeUsuariosConMensajeDevuelveSuMensaje	| unUsuario otroUsuario conversacion listaDeUsuarios|	listaDeUsuarios := OrderedCollection new.	unUsuario := Usuario new.	otroUsuario := Usuario  new.	conversacion := Conversacion new.	listaDeUsuarios add: unUsuario.	listaDeUsuarios add: otroUsuario .	conversacion setUsuarios: listaDeUsuarios.		conversacion agregarMensaje: 'hola que tal?' enConversacion: 'roberto,carlos'.	conversacion agregarMensaje: 'todo bien' enConversacion: 'roberto,carlos'.	conversacion agregarMensaje: 'me alegro' enConversacion: 'roberto,carlos'.				self assert: conversacion getMensaje equals: 'hola que tal? | todo bien | me alegro'.! !!ConversacionTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 21:26'!test01ConversacionDeUsuariosVaciaDevuelveCadenaVacia	| unUsuario otroUsuario conversacion listaDeUsuarios|	listaDeUsuarios := OrderedCollection new.	unUsuario := Usuario new.	otroUsuario := Usuario  new.	conversacion := Conversacion new.	listaDeUsuarios add: unUsuario.	listaDeUsuarios add: otroUsuario .	conversacion setUsuarios: listaDeUsuarios.		conversacion agregarMensaje: '' enConversacion: 'roberto,carlos'.		self assert: conversacion getMensaje equals: ''.		! !!ConversacionTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 21:17'!test00ConversacionVaciaDevuelveCadenaVacia	| unaConversacion |	unaConversacion := Conversacion new.		self assert: unaConversacion getMensaje equals: ''.! !TestCase subclass: #FormatoDeMensajeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!FormatoDeMensajeTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 21:52'!test03SepararColeccionUsandoLongitudCeroDaPalabrasVacias	| formateador lista|	lista := OrderedCollection new.	formateador := FormatoDeMensaje new.	lista add: 'hay que ponernos al dia con probabilidad'.	lista add: 'definitivamente'.		self assert: (formateador formatearColeccion: lista conLongitud: 0) equals: '... | ...'.! !!FormatoDeMensajeTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 21:43'!test01FormatearListaUsandoSeparador	| formateador lista|	lista := OrderedCollection new.	formateador := FormatoDeMensaje new.	lista add: 'hola,como estas?'.	lista add: 'muy bien'.		self assert: (formateador formatearColeccion: lista) equals: 'hola,como estas? | muy bien'.! !!FormatoDeMensajeTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 21:34'!test00FormatearListaVaciaDevuelveCadenaVacia	|formateador coleccion|	formateador := FormatoDeMensaje new.	coleccion := OrderedCollection new.		self assert: (formateador formatearColeccion: coleccion) equals: ''.! !!FormatoDeMensajeTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 21:50'!test02SepararColeccionUsandoLongitudySeparador	| formateador lista|	lista := OrderedCollection new.	formateador := FormatoDeMensaje new.	lista add: 'hola juan,te llego mi mensaje?'.	lista add: 'te envie la tarea por mail'.	lista add: 'te llegaron las notas'.		self assert: (formateador formatearColeccion: lista conLongitud: 4) equals: 'hola... | te e... | te l...'.	self assert: (formateador formatearColeccion: lista conLongitud: 2) equals: 'ho... | te... | te...'.! !TestCase subclass: #UsuarioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 23:38'!test06UsuarioNoRecibeMensajeDeCanal	| usuario|	usuario := Usuario new.	usuario agregarCanalAsociado: 'partido'.	usuario agregarCanalAsociado: 'almuerzo'.		usuario agregarMensajePorPalabraClave: 'hoy tenemos el partido' DeCanal: 'partido'.	usuario agregarMensajePorPalabraClave: 'hoy tenemos el almuerzo' DeCanal: 'amuerzo'.		self assert: usuario getMensaje equals: ''.	! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 23:06'!test02ElMensajeDelUsuarioSeResumeAUnaLongitud	| usuario |	usuario := Usuario new.	usuario agregarMensaje: 'estamos en el aula 401'.	usuario agregarMensaje: 'despues nos vamos a tomar un cafe'.	usuario agregarMensaje: 'venis?'.		self assert: (usuario getMensajeConLongitud: 3) equals: 'est... | des... | ven...'.	self assert: (usuario getMensajeConLongitud: 4) equals: 'esta... | desp... | veni...'.	! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 23:39'!test07UsuarioRecibeMensajeDeCanalPorPalabraClave	| usuario|	usuario := Usuario new.	usuario agregarCanalAsociado: 'partido'.	usuario agregarCanalAsociado: 'almuerzo'.	usuario agregarPalabraClave: 'hoy'.		usuario agregarMensajePorPalabraClave: 'hoy tenemos el partido' DeCanal: 'partido'.	usuario agregarMensajePorPalabraClave: 'hoy tenemos el almuerzo' DeCanal: 'amuerzo'.		self assert: usuario getMensaje equals: 'hoy tenemos el partido | hoy tenemos el almuerzo'.	! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 22:57'!test00UsuarioSinMensajeDevuelveCadenaVacia	| usuario |	usuario := Usuario new.		self assert: usuario getMensaje equals: ''.! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 23:10'!test03ElMensajeDelUsuarioSeResumeAChicasLongitudes	| usuario |	usuario := Usuario new.	usuario agregarMensaje: 'estamos testeando al usuario'.	usuario agregarMensaje: 'Arrange Act'.	usuario agregarMensaje: 'Assert'.		self assert: (usuario getMensajeConLongitud: 0) equals: '... | ... | ...'.	self assert: (usuario getMensajeConLongitud: 1) equals: 'e... | A... | A...'.! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 23:45'!test08ElUsuarioNoRecibeNotificacionesDeCanalPausado	| usuario |	usuario := Usuario new.	usuario agregarCanalAsociado: 'gimnasio'.	usuario agregarCanalAsociado: 'natacion'.	usuario agregarPalabraClave: 'entrenar'.		usuario agregarMensajePorPalabraClave: 'hoy hay que entrenar'.	usuario agregarMensajePorPalabraClave: 'hoy hay que entrenar en el gimnasio' DeCanal: 'gimnasio'.		usuario agregarCanalPausado: 'natacion'.	usuario agregarMensajePorPalabraClave: 'no,hoy hay que entrenar en la pileta' DeCanal: 'natacion'.		self assert: usuario getMensaje equals: 'hoy hay que entrenar | hoy hay que entrenar en el gimnasio'.			! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 23:20'!test05ElUsuarioAgregaMensajesConPalabraClave	| usuario |	usuario := Usuario new.	usuario agregarPalabraClave: 'nota'.	usuario agregarPalabraClave: 'final'.		usuario agregarMensajePorPalabraClave: 'estamos en el aula 303 esperando las notas'.	usuario agregarMensajePorPalabraClave: 'pero yo estoy en la 400 esperando mi nota'.	usuario agregarMensajePorPalabraClave: 'con esa nota tenes que dar el final'.	usuario agregarMensaje: 'hoy?'.	usuario agregarMensajePorPalabraClave: 'no se'.		self assert: usuario getMensaje equals: 'pero yo estoy en la 400 esperando mi nota | con esa nota tenes que dar el final | hoy?'.! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 23:57'!test09SeRecibenNotificacionesAlRenaudarUnCanalPausado	| usuario |	usuario := Usuario new.	usuario agregarCanalAsociado: 'parciales'.	usuario agregarPalabraClave: 'fisica'.		usuario agregarMensajePorPalabraClave: 'el sabado se rinde fisica' DeCanal: 'parciales'.	usuario agregarCanalPausado: 'parciales'.	usuario agregarMensajePorPalabraClave: 'estudie para fisica' DeCanal: 'parciales'.	usuario eliminarCanalPausado: 'parciales'.	usuario agregarMensajePorPalabraClave: 'si,estudie mucho para fisica' DeCanal: 'parciales'.		self assert: usuario getMensaje equals: 'el sabado se rinde fisica | si,estudie mucho para fisica'.	! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 23:23'!test04ElUsuarioAgregaMensajesConPalabraClave	| usuario |	usuario := Usuario new.	usuario agregarPalabraClave: 'papel'.	usuario agregarPalabraClave: 'libreria'.		usuario agregarMensajePorPalabraClave: 'ayer perdi un papel'.	usuario agregarMensajePorPalabraClave: 'te fijaste en la papeleria?'.	usuario agregarMensajePorPalabraClave: 'no'.	usuario agregarMensajePorPalabraClave: 'fijate en la libreria'.		self assert: usuario getMensaje equals: 'ayer perdi un papel | fijate en la libreria'.	! !!UsuarioTest methodsFor: 'tests' stamp: 'Andoni 10/17/2019 22:59'!test01UsuarioConMensajeDevuelveCadenaConSeparador	| usuario |	usuario := Usuario new.	usuario agregarMensaje: 'mensaje para algun usuario'.	usuario agregarMensaje: 'otro mensaje'.		self assert: usuario getMensaje equals: 'mensaje para algun usuario | otro mensaje'.! !